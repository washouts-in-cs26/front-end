{"ast":null,"code":"import { FETCH_DATA_START, FETCH_DATA_SUCCESS, FETCH_DATA_FAILURE, MOVE_PLAYER_SUCCESS, MOVE_PLAYER_FAILURE, FETCH_INIT_START, FETCH_INIT_SUCCESS, FETCH_INIT_FAILURE } from '../actions';\nconst initialState = {\n  mapData: [],\n  // the array of objects that holds all rooms\n  playerData: [],\n  // the response that will be returned when we move player (POST REQUEST)\n  initInfo: [],\n  //this will hold our player's data like current room\n  isFetching: false,\n  error: ''\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_DATA_START:\n      return { ...state,\n        isFetching: true,\n        error: ''\n      };\n\n    case FETCH_DATA_SUCCESS:\n      return { ...state,\n        mapData: action.payload,\n        isFetching: false,\n        error: ''\n      };\n\n    case FETCH_DATA_FAILURE:\n      return { ...state,\n        isFetching: false,\n        error: action.payload\n      };\n\n    case MOVE_PLAYER_SUCCESS:\n      return { ...state,\n        playerData: action.payload,\n        isFetching: false,\n        error: ''\n      };\n\n    case MOVE_PLAYER_FAILURE:\n      return { ...state,\n        isFetching: false,\n        error: action.payload\n      };\n\n    case FETCH_INIT_START:\n      return { ...state,\n        isFetching: true,\n        error: action.payload\n      };\n\n    case FETCH_INIT_SUCCESS:\n      return { ...state,\n        initInfo: action.payload,\n        isFetching: false,\n        error: ''\n      };\n\n    case FETCH_INIT_FAILURE:\n      return { ...state,\n        isFetching: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/15403/Desktop/CS26/front-end/client/src/store/reducers/index.js"],"names":["FETCH_DATA_START","FETCH_DATA_SUCCESS","FETCH_DATA_FAILURE","MOVE_PLAYER_SUCCESS","MOVE_PLAYER_FAILURE","FETCH_INIT_START","FETCH_INIT_SUCCESS","FETCH_INIT_FAILURE","initialState","mapData","playerData","initInfo","isFetching","error","reducer","state","action","type","payload"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,kBAFJ,EAGIC,kBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,gBANJ,EAOIC,kBAPJ,EAQIC,kBARJ,QASO,YATP;AAWA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,EADQ;AACJ;AACbC,EAAAA,UAAU,EAAE,EAFK;AAED;AAChBC,EAAAA,QAAQ,EAAE,EAHO;AAGH;AACdC,EAAAA,UAAU,EAAE,KAJK;AAKjBC,EAAAA,KAAK,EAAE;AALU,CAArB;AAQA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKjB,gBAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHH,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAKZ,kBAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHN,QAAAA,OAAO,EAAEO,MAAM,CAACE,OAFb;AAGHN,QAAAA,UAAU,EAAE,KAHT;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAMJ,SAAKX,kBAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHH,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHX,OAAP;;AAKJ,SAAKf,mBAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHL,QAAAA,UAAU,EAAEM,MAAM,CAACE,OAFhB;AAGHN,QAAAA,UAAU,EAAE,KAHT;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAMJ,SAAKT,mBAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHH,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHX,OAAP;;AAKJ,SAAKb,gBAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHH,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHX,OAAP;;AAKJ,SAAKZ,kBAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHJ,QAAAA,QAAQ,EAAEK,MAAM,CAACE,OAFd;AAGHN,QAAAA,UAAU,EAAE,KAHT;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAMJ,SAAKN,kBAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHH,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHX,OAAP;;AAKJ;AACI,aAAOH,KAAP;AArDR;AAuDH,CAxDM","sourcesContent":["import {\r\n    FETCH_DATA_START,\r\n    FETCH_DATA_SUCCESS,\r\n    FETCH_DATA_FAILURE,\r\n    MOVE_PLAYER_SUCCESS,\r\n    MOVE_PLAYER_FAILURE,\r\n    FETCH_INIT_START,\r\n    FETCH_INIT_SUCCESS,\r\n    FETCH_INIT_FAILURE\r\n} from '../actions'\r\n\r\nconst initialState = {\r\n    mapData: [], // the array of objects that holds all rooms\r\n    playerData: [], // the response that will be returned when we move player (POST REQUEST)\r\n    initInfo: [], //this will hold our player's data like current room\r\n    isFetching: false,\r\n    error: ''\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case FETCH_DATA_START:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                error: ''\r\n            };\r\n        case FETCH_DATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mapData: action.payload,\r\n                isFetching: false,\r\n                error: ''\r\n            };\r\n        case FETCH_DATA_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error: action.payload\r\n            }\r\n        case MOVE_PLAYER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                playerData: action.payload,\r\n                isFetching: false,\r\n                error: ''\r\n            }\r\n        case MOVE_PLAYER_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error: action.payload\r\n            }\r\n        case FETCH_INIT_START:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                error: action.payload\r\n            }\r\n        case FETCH_INIT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initInfo: action.payload,\r\n                isFetching: false,\r\n                error: ''\r\n            }\r\n        case FETCH_INIT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}